#!/usr/bin/env node

var childProcess = require('child_process');
var fs = require('fs');
var jsup = require('jsup');
var Q = require('q');
var readline = require('readline');
var semver = require('semver');
var winSpawn = require('win-spawn');

var exists = fs.existsSync;

/**
 * Read and parse a JSON file named `name`.
 *
 * @param {String} name
 * @return {Object} parsed JSON
 */
function readJSON(name) {
  if (!exists(name)) {
    return null;
  }
  return JSON.parse(fs.readFileSync(name).toString().trim());
}

/**
 * Change the value of property `prop` to `value` in a JSON file named `named.
 *
 * @param {String} name
 * @param {String} prop
 * @param {*} value
 */
function editJSON(name, prop, value) {
  try {
    var dat = jsup(fs.readFileSync(name).toString().trim());
    dat.set([prop], value);
    fs.writeFileSync(name, dat.stringify());
  } catch (ex) {
    var json = readJSON(name);
    json[prop] = value;
    fs.writeFileSync(name, JSON.stringify(json, null, '  '));
  }
}

/**
 * Launch a new process with the given `cmd`, with command line arguments
 * `args`.
 *
 * @param {String} cmd
 * @param {Array} args
 * @param {Object} options
 * @return {Promise}
 */
function spawn(cmd, args, options) {
  var def = Q.defer();
  var proc = winSpawn(cmd, args, options);
  proc.on('exit', function(code) {
    if (code !== 0) {
      def.reject(new Error(cmd + ' exited with code ' + code));
    }
    else {
      def.resolve(null);
    }
  });
  return def.promise;
}

var version = process.argv[2];

/**
 * Get the highest version tag. Calls `cb(error, version)`.
 *
 * @param {Function} cb
 */
function getMaxVersion(cb) {
  childProcess.exec('git tag', function(err, res) {
    if (err) {
      return cb(err);
    }
    var max = '0.0.0';
    var hasVersion = false;
    res.toString()
      .split('\n')
      .forEach(function(v) {
        v = v.trim();
        if (/^\d+\.\d+\.\d+$/.test(v)) {
          hasVersion = true;
          if (semver.gt(v, max)) {
            max = v;
          }
        }
      });
    cb(null, hasVersion ? max : null);
  });
}

var com = readJSON('./component.json');
var npm = readJSON('./package.json');

if (/^\d+\.\d+\.\d+$/.test(version)) {
  getMaxVersion(function(err, max) {
    if (err) {
      throw err;
    }
    if (max && (semver.gt(max, version) || max === version)) {
      console.error('Can\'t create version ' + version + ' because version ' + max + ' already exists.');
      process.exit(1);
    }
    else {
      newVersion();
    }
  });
}
else if (version) {
  console.error(version + ' does not match the expression `/^\\d+\\.\\d+\\.\\d+$/`');
  process.exit(1);
}
else {
  getMaxVersion(function(err, max) {
    if (err) {
      throw err;
    }
    console.log('The current max-version is ' + max);
  });
}

function newVersion() {
  if (com && com.version !== version) {
    if (npm && npm.version === version && semver.gt(npm.version, com.version)) {
      editJSON('./component.json', 'version', version);
      com.version = version;
    }
  }
  if (npm && npm.version != version) {
    if (com && com.version === version && semver.gt(com.version, npm.version)) {
      editJSON('./package.json', 'version', version);
      npm.version = version;
    }
  }
  if (com && com.version > version) {
    console.error('The version specified is less than the version in component.json');
  }
  if (npm && npm.version > version) {
    console.error('The version specified is less than the version in package.json');
  }
  if (!((com && com.version > version) || (npm && npm.version > version))) {
    if (!((com && com.version !== version)||(npm && npm.version !== version))) {
      doUpdate();
    }
    else {
      var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      var updating = [];
      if (com && com.version !== version) updating.push('component.json');
      if (npm && npm.version !== version) updating.push('package.json');

      rl.question('Update versions in ' + updating.join(' and ') + ' to ' + version +'? (yes)',
        function(answer) {
          rl.close();
          if (answer && answer !== 'yes') {
            console.error('Versions were out of date');
          }
          else {
            updating.forEach(function(name) {
              editJSON('./' + name, 'version', version);
            });
            if (npm) {
              npm.version = version;
            }
            if (com) {
              com.version = version;
            }
            doUpdate();
          }
        }
      );
    }
  }
  else {
    process.exit(1);
  }
}

function doUpdate() {
  if (com && com.version !== version) {
    console.error('component.json must have the correct version');
  }
  if (npm && npm.version !== version) {
    console.error('package.json must have the correct version');
  }
  if ((com && com.version !== version) || (npm && npm.version !== version)) {
    process.exit(1);
  }
  var commands = [];

  commands.push(['git', ['commit', '-S', '-am', 'Release ' + version]]);
  commands.push(['git', ['tag', '-s', version, '-m', version]]);
  commands.push(['git', ['push','--follow-tags']]);

  if (npm && !npm.private) {
    commands.push(['npm', ['publish']]);
  }

  var prom = Q.resolve();
  commands.forEach(function(command) {
    prom = prom.then(function() {
      console.log('\n\nexec: ' + command[0] + ' ' + command[1].join(' ') + '\n\n');
      return spawn(command[0], command[1], {stdio: 'inherit'});
    });
  });
  prom
    .then(function () {
      console.log('\n\nPublish complete');
    })
    .done();
}